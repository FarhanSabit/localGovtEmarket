<%- include('partials/header') %>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Delivery Stock Entry</title>
<style>
    /* CSS to structure the layout */
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
    }

    .card {
        margin: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        padding: 20px;
    }

    .col-lg-12 {
        width: 100%;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: 0;
    }

    /* Centering the camera box */
    .camera-box {
        text-align: center;
        margin: 20px auto;
        width: 100%;
        max-width: 500px;
    }

    #webcam {
        width: 100%;
        height: auto;
        border: 1px solid #000000;
        border-radius: 4px;
    }

    #status {
        margin-top: 10px;
        font-size: 16px;
        color: rgb(103, 10, 179);
    }

    button {
        margin-top: 10px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        border-radius: 4px;
        border: 1px solid #ccc;
        background-color: rgb(67, 29, 155);
        color: white;
    }

    button:hover {
        background-color: #260879;
    }

    /* Styling for the form below the camera box */
    #stockEntryForm {
        width: 100%;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        font-size: 16px;
        margin-bottom: 5px;
        display: block;
    }

    input {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .form-actions {
        text-align: center;
    }

    .form-actions button {
        width: 100%;
        padding: 15px;
        background-color: rgb(67, 29, 155);
        border: none;
        border-radius: 4px;
        color: white;
        font-size: 16px;
        cursor: pointer;
    }

    .form-actions button:hover {
        background-color: #260879;
    }

    /* Media query for responsiveness */
    @media (max-width: 768px) {
        .camera-box {
            max-width: 100%;
        }

        button {
            width: 100%;
        }
    }
</style>
</head>
<body>
    <div class="card w-100">
        <div class="card-body">
            <div class="row d-flex align-items-center justify-content-between">
                <div class="col-md-8">
                    <h1 class="card-title">Delivery Stock Entry</h1>
                    <div class="camera-box">
                        <video id="webcam" autoplay></video>
                        <p id="status">IDLE</p>
                        <button id="request-permission">Request Camera Permissions</button>
                        <button id="scan-file">Scan an Image File</button>
                        <input type="file" id="file-input" accept="image/*" style="display:none;">
                    </div>
                </div>
            </div>
            
            <!-- Form placed under the camera box -->
            <div class="row d-flex align-items-center justify-content-between">
                <form id="stockEntryForm">
                    <div class="form-group">
                        <label for="gateToken">Gate Entry Token <span style="color: red;">*</span></label>
                        <input type="text" id="gateToken" placeholder="Type Token" required>
                    </div>
                    <div class="form-actions">
                        <button type="submit">Product Stock In</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div>&nbsp;&nbsp;</div>
    <div>&nbsp;&nbsp;</div>

    <div class="card w-100">
        <div class="card-body">
            <h1 class="card-title">Last Delivery Stock Entries</h1>
            <div class="table-responsive">
                <table class="table table-bordered table-striped table-hover datatable last_entries_table">
                    <thead>
                        <tr>
                            <th>Vat Token</th>
                            <th>Gate Token</th>
                            <th>Customer Code</th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Vat Amount</th>
                            <th>Entry Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th>453453</th>
                            <th>45454</th>
                            <th>556668</th>
                            <th>Tennis Ball</th>
                            <th>20</th>
                            <th>100</th>
                            <th>10AM 24/11/2024</th>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.js"></script>
    <script>
        const webcamElement = document.getElementById("webcam");
        const requestPermissionButton = document.getElementById("request-permission");
        const statusElement = document.getElementById("status");
        const scanFileButton = document.getElementById("scan-file");
        const fileInput = document.getElementById("file-input");

        let scannerInterval;

        // Request camera permission and start scanning
        requestPermissionButton.addEventListener("click", async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                webcamElement.srcObject = stream;
                webcamElement.style.display = "block";
                statusElement.textContent = "LIVE";
                statusElement.style.color = "green";
                
                // Start QR code scanning every 500ms
                scannerInterval = setInterval(scanQRCode, 500);
            } catch (error) {
                alert("Camera permission denied or unavailable.");
            }
        });

        // Scan QR Code from the webcam stream
        function scanQRCode() {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");

            canvas.height = webcamElement.videoHeight;
            canvas.width = webcamElement.videoWidth;

            context.drawImage(webcamElement, 0, 0, canvas.width, canvas.height);

            const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
            const code = jsQR(imageData.data, canvas.width, canvas.height, {
                inversionAttempts: "dontInvert",
            });

            if (code) {
                statusElement.textContent = "QR Code Scanned!";
                statusElement.style.color = "blue";
                alert("Scanned QR Code: " + code.data);  // Show the scanned QR code data
                clearInterval(scannerInterval);  // Stop scanning after a successful scan
            }
        }

        // Handle image file input for scanning QR codes
        scanFileButton.addEventListener("click", () => {
            fileInput.click();  // Trigger file input when button is clicked
        });

        fileInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement("canvas");
                    const context = canvas.getContext("2d");

                    canvas.width = img.width;
                    canvas.height = img.height;
                    context.drawImage(img, 0, 0);

                    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, canvas.width, canvas.height, {
                        inversionAttempts: "dontInvert",
                    });

                    if (code) {
                        statusElement.textContent = "QR Code Scanned!";
                        statusElement.style.color = "blue";
                        alert("Scanned QR Code from Image: " + code.data);  // Show the scanned QR code data
                    } else {
                        statusElement.textContent = "No QR code found in the image.";
                        statusElement.style.color = "red";
                    }
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);  // Read the file as a data URL
        });

        // Form submission logic
        document.getElementById("stockEntryForm").addEventListener("submit", (event) => {
            event.preventDefault();
            const token = document.getElementById("gateToken").value;
            if (!token) {
                alert("Please enter the Gate Entry Token.");
                return;
            }
            alert("Processing stock entry for token: " + token);
            // Add integration logic here
        });
    </script>
    
<%- include('partials/footer') %>
